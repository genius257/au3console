#AutoIt3Wrapper_Run_AU3Check=N

#include-once

#include <String.au3>
;#include "..\au3pm\StringRegExpSplit\StringRegExpSplit.au3"
#include "..\helpers.au3"
#include ".\OutputFormatterStyle.au3"
#include ".\OutputFormatterStyleStack.au3"

Class OutputFormatter
    $decorated
    $styles = __au3Console_array()
    $styleStack

    Func escape($text)
        $text = StringRegExpReplace($text, '([^\\]?)<', '$1\<', $text);

        Return $this.escapeTrailingBackslash($text);
    EndFunc

    Func escapeTrailingBackslash($text)
        if ('\' == StringRight($text, 1)) Then
            Local $len = StringLen($text);
            $text = StringTrimRight($text, '\')
            $text = StringReplace(Chr(0), '', $text);
            $text &= _StringRepeat(chr(0), $len - StringLen($text))
        EndIf

        return $text
    EndFunc

    Func __construct($decorated = false, $styles = __au3Console_assoc_array())
        $this.decorated = $decorated;

        $this.setStyle('error', OutputFormatterStyle('white', 'red'));
        $this.setStyle('info', OutputFormatterStyle('green'));
        $this.setStyle('comment', OutputFormatterStyle('yellow'));
        $this.setStyle('question', OutputFormatterStyle('black', 'cyan'));

        Local $name, $style, $i
        For $i = 0 To UBound($styles, 1) - 1 Step +1
            $name = $styles[$i][0]
            $style = $styles[$i][1]
            $this.setStyle($name, $style)
        Next

        $this.styleStack = OutputFormatterStyleStack();
    EndFunc

    Func setDecorated($decorated)
        $this.decorated = $decorated
    EndFunc

    Func isDecorated()
        return $this.decorated
    EndFunc

    Func setStyle($name, $style)
        Local $styles = $this.styles
        __au3Console_array_assoc_set($styles, StringLower($name), $style)
        $this.styles = $styles
    EndFunc

    Func hasStyle($name)
        return __au3Console_array_assoc_isset($this.styles, StringLower($name))
    EndFunc

    Func getStyle()
        if (Not $this.hasStyle($name)) Then
            return SetError(1, 1, InvalidArgumentException(StringFormat('Undefined style: "%s".', $name)))
        EndIf

        return __au3Console_array_assoc_get($this.styles, StringLower($name))
    EndFunc

    Func format($message)
        return $this.formatAndWrap($message, 0)
    EndFunc

    Func formatAndWrap($message, $width)
        Local $offset = 1
        Local $output = ''
        Local $tagRegex = '[a-z][^<>]*+'
        Local $currentLineLength = 0
        #Region preg_match_all
        Local $_matches = StringRegExp($message, StringReplace("(?ix)<(($tagRegex) | /($tagRegex)?)>", "$tagRegex", $tagRegex), 4)
        Local $matches[4][UBound($_matches)][2]
        Local $_i = 0
        Local $_offset = 1
        While 1
            $_matches = StringRegExp($message, StringReplace("(?ix)<(($tagRegex) | /($tagRegex)?)>", "$tagRegex", $tagRegex), 2, $_offset)
            If @error Then ExitLoop
            $_offset = @extended
            $matches[0][$_i][0] = $_matches[0]
            $matches[0][$_i][1] = $_offset - StringLen($_matches[0])
            $matches[1][$_i][0] = $_matches[1]
            $matches[1][$_i][1] = $matches[0][$_i][1] + 1
            $matches[2][$_i][0] = StringLeft($_matches[1], 1) = "/" ? Null : $_matches[2]
            $matches[2][$_i][1] = StringLeft($_matches[1], 1) = "/" ? -1 : $matches[1][$_i][1]
            $matches[3][$_i][0] = StringLeft($_matches[1], 1) = "/" ? $_matches[2] : Null
            $matches[3][$_i][1] = StringLeft($_matches[1], 1) = "/" ? $matches[1][$_i][1] + 1 : -1
            $_i += 1
        WEnd
        #EndRegion preg_match_all
        ;preg_match_all(StringReplace("(?ix)<(($tagRegex) | /($tagRegex)?)>", "$tagRegex", $tagRegex), $message, $matches, \PREG_OFFSET_CAPTURE);
        Local $i, $match
        For $i = 0 To UBound($matches, 2) - 1 Step +1
            ;$match = $matches[0][$i]
            Local $pos = $matches[0][$i][1]
            Local $text = $matches[0][$i][0]

            #cs
            ; will never be true, as it is comparing one char is equal to two chars
            if (Not 1 = $pos And '\\' == StringMid($message, $pos - 1, 1)) Then
                ContinueLoop
            EndIf
            #ce

            ;; add the text up to the next tag
            $output &= $this.applyCurrentStyle(StringMid($message, $offset, $pos - $offset), $output, $width, $currentLineLength);
            $offset = $pos + StringLen($text);

            ;; opening tag?
            Local $open = Not ('/' = StringMid($text, 2, 1))
            If ($open) Then
                $tag = $matches[1][$i][0];
            Else
                $tag = ($matches[3][$i][0] = Null) ? $matches[3][$i][0] : '';
            EndIf

            Local $style = $this.createStyleFromString($tag)
            If ((Not $open) And (Not $tag)) Then
                ;; </>
                $this.styleStack.pop();
            ElseIf (Null = $style) Then
                $output &= $this.applyCurrentStyle($text, $output, $width, $currentLineLength);
            ElseIf ($open) Then
                $this.styleStack.push($style)
            Else
                $this.styleStack.pop($style);
            EndIf
        Next
        #cs
        foreach ($matches[0] as $i => $match) {
            $pos = $match[1];
            $text = $match[0];

            if (Not 1 = $pos And '\\' == $message[$pos - 1]) Then
                ContinueLoop
            EndIf

            ;; add the text up to the next tag
            $output &= $this.applyCurrentStyle(StringMid($message, $offset, $pos - $offset), $output, $width, $currentLineLength);
            $offset = $pos + StringLen($text);

            ;; opening tag?
            if ($open = '/' != $text[1]) {
                $tag = $matches[1][$i][0];
            } else {
                $tag = isset($matches[3][$i][0]) ? $matches[3][$i][0] : '';
            }

            If (Not $open And Not $tag) Then
                ;; </>
                $this.styleStack.pop();
            ElseIf (null == $style = $this.createStyleFromString($tag)) Then
                $output &= $this.applyCurrentStyle($text, $output, $width, $currentLineLength);
            ElseIf ($open) Then
                $this.styleStack.push($style)
            Else
                $this.styleStack.pop($style);
            EndIf
        }
        #ce

        $output &= $this.applyCurrentStyle(StringMid($message, $offset), $output, $width, $currentLineLength);

        if (Not (0 = StringInStr($output, Chr(0)))) Then
            return strtr($output, ["\0" => '\\', '\\<' => '<']);
        EndIf

        return StringReplace($output, '\\<', '<')
    EndFunc

    Func getStyleStack()
        Return $this.styleStack
    EndFunc

    Func createStyleFromString($string)
        If (__au3Console_array_assoc_isset($this.styles, $string)) Then
            return __au3Console_array_assoc_get($this.styles, $string);
        EndIf

        #Region preg_match_all
        Local $_matches = StringRegExp($string, "([^=]+)=([^;]+)(;|$)", 4)
        Local $matches[UBound($_matches)][4]
        Local $_i = 0
        Local $_offset = 1
        While 1
            $_matches = StringRegExp($string, "([^=]+)=([^;]+)(;|$)", 2, $_offset)
            If @error <> 0 Then ExitLoop
            $_offset = @extended
            $matches[$_i][0] = $_matches[0]
            $matches[$_i][1] = $_matches[1]
            $matches[$_i][2] = $_matches[2]
            $matches[$_i][3] = $_matches[3]
            $_i += 1
        WEnd
        #EndRegion preg_match_all

        If UBound($matches) = 0 Then Return Null

        #cs
        if (!preg_match_all('/([^=]+)=([^;]+)(;|$)/', $string, $matches, \PREG_SET_ORDER)) {
            return null;
        }
        #ce

        $style = OutputFormatterStyle();
        For $_i = 0 To UBound($matches) Step +1
            ;Local $match = $matches
            $matches[$_i][1] = StringLower($matches[$_i][1])

            If 'fg' == $matches[$_i][1] Then
                $style.setForeground(StringLower($matches[$_i][2]))
            ElseIf 'bg' == $matches[$_i][1] Then
                $style.setBackground(StringLower($matches[$_i][2]));
            ElseIf 'href' == $matches[$_i][1] Then
                $style.setHref($matches[$_i][2])
            ElseIf 'options' == $matches[$_i][1] Then
                $options = StringRegExp(StringLower($matches[$_i][2]), '[^,;]+', 3)
                Local $_j
                For $_j = 0 To UBound($options) - 1 Step +1
                    $style.setOption($options[$_j])
                Next
            Else
                Return Null
            EndIf
        Next

        return $style;
    EndFunc

    ;WARNING: $currentLineLength should be ByRef
    Func applyCurrentStyle($text, $current, $width, $currentLineLength)
        If "" = $text Then Return ""

        If Not $width Then Return $this.isDecorated() ? $this.styleStack.getCurrent().apply($text) : $text

        If (Not $currentLineLength) And (Not ("" = $current)) Then $text = StringTrimLeft($text)

        If $currentLineLength Then
            Local $i = $width - $currentLineLength
            Local $prefix = StringMid($text, 1, $i)&@CRLF
            $text = StringMid($text, $i)
        Else
            Local $prefix = ""
        EndIf

        Local $matches = StringRegExp($text, "(\n)$", 1)
        $text = StringRegExpReplace($prefix, "([^\n]{"&$width&"})\ *", "\$1\n")
        $text = StringRegExpReplace($text, "[\n]*$", "")&(Execute("$matches[0]") ? Execute("$matches[0]") : "")

        If (Not $currentLineLength) And (Not ("" = $current)) And @LF = StringRight($current, 1) Then $text = @CRLF&$text

        Local $lines = StringRegExpSplit($text, "[\n]")

        Local $line
        For $line In $lines
            $currentLineLength += StringLen($line)
            if ($width <= $currentLineLength) Then $currentLineLength = 0
        Next

        If $this.isDecorated() Then
            Local $i
            For $i = 0 To UBound($lines) - 1 Step +1
                $line = $lines[$i]
                $lines[$i] = $this.styleStack.getCurrent().apply($line)
            Next
        EndIf

        Return _ArrayToString($lines, @CRLF)
    EndFunc
EndClass
