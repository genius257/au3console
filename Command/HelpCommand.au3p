#AutoIt3Wrapper_Run_AU3Check=N

#include-once

#include "..\Input\InputArgument.au3"
#include "..\Input\InputDefinition.au3"
#include "..\Input\InputOption.au3"

 ;Extends Command
Class HelpCommand
    $application
    $name
    $processTitle
    $aliases = __Application_Array()
    $definition
    $hidden = false
    $help = ''
    $description = ''
    $fullDefinition
    $ignoreValidationErrors = false
    $code
    $synopsis = __Application_Array()
    $usages = __Application_Array()
    $helperSet
    $command

    Func __construct($name = Null)
        $this.definition = InputDefinition();

        $name = $this.getDefaultName()

        If ((Not Null = $name) Or (Not Null = $name)) Then
            $this.setName($name);
        EndIf

        $this.configure()
    EndFunc

    Func getDefaultName()
        Return "Command"
        #cs
        $class = "Command"
        $r = new \ReflectionProperty($class, 'defaultName');

        return $class === $r.class ? static::$defaultName : null;
        #ce
    EndFunc

    Func ignoreValidationErrors()
        $this.ignoreValidationErrors = True
    EndFunc

    Func setApplication($application = Null)
        $this.application = $application;
        If ($application) Then
            $this.setHelperSet($application.getHelperSet());
        else
            $this.helperSet = Null;
        EndIf

        $this.fullDefinition = Null;
    EndFunc

    Func setHelperSet($helperSet)
        $this.helperSet = $helperSet
    EndFunc

    Func getHelperSet()
        Return $this.helperSet
    EndFunc

    Func getApplication()
        Return $this.application
    EndFunc

    Func isEnabled()
        Return True
    EndFunc

    Func configure()
        $this.ignoreValidationErrors();

        Local $tmp = [ _
            InputArgument('command_name', $__g_InputArgument_OPTIONAL, 'The command name', 'help'), _
            InputOption('format', Null, $__g_InputOption_VALUE_REQUIRED, 'The output format (txt, xml, json, or md)', 'txt'), _
            InputOption('raw', Null, $__g_InputOption_VALUE_NONE, 'To output raw command help') _
        ]
        $this.setName('help').setDefinition($tmp).setDescription('Displays help for a command').setHelp( _
'The <info>%command.name%</info> command displays help for a given command:'&@CRLF& _
'  <info>php %command.full_name% list</info>'&@CRLF& _
'You can also output the help in other formats by using the <comment>--format</comment> option:'&@CRLF& _
'  <info>php %command.full_name% --format=xml list</info>'&@CRLF& _
'To display the list of available commands, please use the <info>list</info> command.' _
            )
    EndFunc

    Func execute($input, $output)
        If (null = $this.command) Then
            $this.command = $this.getApplication().find($input.getArgument('command_name'));
        EndIf

        $helper = new DescriptorHelper();
        Local $tmp = [ _
            'format' => $input.getOption('format'), _
            'raw_text' => $input.getOption('raw'), _
        ]
        $helper.describe($output, $this.command, $tmp);

        $this.command = null;

        return 0;
    EndFunc

    Func interact($input, $output)

    EndFunc

    Func initialize($input, $output)

    EndFunc

    Func run($input, $output)
        ; add the application arguments and options
        $this.mergeApplicationDefinition();

        ; bind the input against the command specific arguments/options
        ;try {
            $input.bind($this.getDefinition());
        ;} catch (ExceptionInterface $e) {
        ;    if (!$this.ignoreValidationErrors) then
        ;        throw $e;
        ;    endif
        ;}

        $this.initialize($input, $output);

        if (Not Null = $this.processTitle) Then
            #cs
            if (\function_exists('cli_set_process_title')) then
                if (!@cli_set_process_title($this.processTitle)) then
                    if ('Darwin' === \PHP_OS) then
                        $output.writeln('<comment>Running "cli_set_process_title" as an unprivileged user is not supported on MacOS.</comment>', OutputInterface::VERBOSITY_VERY_VERBOSE);
                    else
                        cli_set_process_title($this.processTitle);
                    endif
                endif
            elseif (\function_exists('setproctitle')) then
                setproctitle($this.processTitle);
            elseif (OutputInterface::VERBOSITY_VERY_VERBOSE === $output.getVerbosity()) then
                $output.writeln('<comment>Install the proctitle PECL to be able to change the process title.</comment>');
            endif
            #ce
        EndIf

        if ($input.isInteractive()) Then
            $this.interact($input, $output);
        EndIf

        ; The command name argument is often omitted when a command is executed directly with its run() method.
        ; It would fail the validation if we didn't make sure the command argument is present,
        ; since it's required by the application.
        if ($input.hasArgument('command') And Null = $input.getArgument('command')) Then
            $input.setArgument('command', $this.getName());
        EndIf

        $input.validate();

        Local $statusCode
        if ($this.code) Then
            $statusCode = ($this.code)($input, $output);
        else
            $statusCode = $this.execute($input, $output);

            if (Not IsNumber($statusCode)) Then
                Return SetError(1, 1, TypeError(StringFormat('Return value of "%s::execute()" must be of the type int, "%s" returned.', 'Command', get_debug_type($statusCode))))
            EndIf
        EndIf

        return IsNumber($statusCode) ? Number($statusCode) : 0;
    EndFunc

    Func setCode($code)
        #cs
        if (IsFunc($code)) Then
            $r = new \ReflectionFunction($code);
            if (null === $r.getClosureThis()) Then
                $code = \Closure::bind($code, $this);
            EndIf
        EndIf
        #ce

        $this.code = $code;

        return $this;
    EndFunc

    Func mergeApplicationDefinition($mergeArgs = True)
        if (Null = $this.application) Then
            return;
        EndIf

        $this.fullDefinition = InputDefinition();
        $this.fullDefinition.setOptions($this.definition.getOptions());
        $this.fullDefinition.addOptions($this.application.getDefinition().getOptions());

        if ($mergeArgs) Then
            $this.fullDefinition.setArguments($this.application.getDefinition().getArguments());
            $this.fullDefinition.addArguments($this.definition.getArguments());
        Else
            $this.fullDefinition.setArguments($this.definition.getArguments());
        EndIf
    EndFunc

    Func setDefinition($definition)
        ;If ($definition instanceof InputDefinition) Then
        ;    $this.definition = $definition;
        ;Else
            $this.definition.setDefinition($definition);
        ;EndIf

        $this.fullDefinition = Null;

        return $this;
    EndFunc

    Func getDefinition()
        return $this.fullDefinition = Null ? $this.getNativeDefinition() : $this.fullDefinition
    EndFunc

    Func getNativeDefinition()
        if (null = $this.definition) Then
            Return SetError(1, 1, LogicException(StringFormat('Command class "%s" is not correctly initialized. You probably forgot to call the parent constructor.', 'Command')))
        EndIf

        return $this.definition;
    EndFunc

    Func addArgument($name, $mode = Null, $description = '', $default = null)
        $this.definition.addArgument(new InputArgument($name, $mode, $description, $default));
        if (Not Null = $this.fullDefinition) Then
            $this.fullDefinition.addArgument(InputArgument($name, $mode, $description, $default));
        EndIf

        return $this;
    EndFunc

    Func addOption($name, $shortcut = Null, $mode = Null, $description = '', $default = Null)
        $this.definition.addOption(new InputOption($name, $shortcut, $mode, $description, $default));
        if (Not Null = $this.fullDefinition) Then
            $this.fullDefinition.addOption(new InputOption($name, $shortcut, $mode, $description, $default));
        EndIf

        return $this;
    EndFunc

    Func setName($name)
        $this.validateName($name);

        $this.name = $name;

        return $this;
    EndFunc

    Func setProcessTitle($title)
        $this.processTitle = $title;

        return $this;
    EndFunc

    Func getName()
        Return $this.name
    EndFunc

    Func setHidden($hidden)
        $this.hidden = $hidden

        Return $this
    EndFunc

    Func isHidden()
        return $this.hidden
    EndFunc

    Func setDescription($description)
        $this.description = $description;

        return $this;
    EndFunc

    Func getDescription()
        return $this.description;
    EndFunc

    Func setHelp($help)
        $this.help = $help;

        return $this;
    EndFunc

    Func getHelp()
        return $this.help;
    EndFunc

    Func getProcessedHelp()
        $name = $this.name;
        $isSingleCommand = $this.application And $this.application.isSingleCommand();

        Local $placeholders = [ _
            '%command.name%', _
            '%command.full_name%', _
        ];
        Local $replacements = [ _
            $name, _
            $isSingleCommand ? $_SERVER['PHP_SELF'] : $_SERVER['PHP_SELF']&' '&$name, _
        ];

        return str_replace($placeholders, $replacements, $this.getHelp() ? $this.getHelp() : $this.getDescription());
    EndFunc

    Func setAliases($aliases)
        For $alias In $aliases
            $this.validateName($alias);
        Next

        $this.aliases = $aliases;

        return $this;
    EndFunc

    Func getAliases()
        return $this.aliases;
    EndFunc

    Func getSynopsis($short = false)
        $key = $short ? 'short' : 'long';

        #cs
        if (!isset($this.synopsis[$key])) Then
            $this.synopsis[$key] = trim(sprintf('%s %s', $this.name, $this.definition.getSynopsis($short)));
        EndIf
        #ce

        return $this.synopsis[$key];
    EndFunc

    Func addUsage($usage)
        if (Not 0 = StringInStr($usage, $this.name)) Then
            $usage = stringfor('%s %s', $this.name, $usage);
        EndIf

        $this.usages[] = $usage;

        return $this;
    EndFunc

    Func getUsages()
        return $this.usages;
    EndFunc

    Func getHelper($name)
        if (null === $this.helperSet) Then
            Return SetError(1, 1, LogicException(StringFormat('Cannot retrieve helper "%s" because there is no HelperSet defined. Did you forget to add your command to the application or to set the application on the command using the setApplication() method? You can also set the HelperSet directly using the setHelperSet() method.', $name)))
        EndIf

        return $this.helperSet.get($name);
    EndFunc

    Func validateName($name)
        if (Not StringRegExp($name, '^[^\:]++(\:[^\:]++)*$')) Then
            Return SetError(1, 1, InvalidArgumentException(StringFormat('Command name "%s" is invalid.', $name)))
        EndIf
    EndFunc

    Func setCommand($command)
        $this.command = $command
    EndFunc
EndClass
